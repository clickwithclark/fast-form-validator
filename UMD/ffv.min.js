/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FFV\": () => (/* binding */ FFV)\n/* harmony export */ });\n\r\n/* eslint-disable no-use-before-define */\r\nconst FFV = (function () {\r\n  let formInputs = [];\r\n  let formState = {};\r\n  let defaults = {};\r\n  function defaultEmailStrategy(){\r\n    \r\n      // eslint-disable-next-line no-useless-escape\r\n      const validEmailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n      if (!this.emailValue) {\r\n        this.emailError = '❌Email cannot be empty';\r\n      }\r\n      if (this.emailValue && !validEmailRegex.test(this.emailValue)) {\r\n        this.emailError = '❌Email must be valid';\r\n\r\n  }}\r\n  function defaultDateOfBirthStrategy(minAge=18){\r\n     // compare dates in milliseconds\r\n     const dob = new Date(this.dobValue).getTime();\r\n     const today = new Date().getTime();\r\n\r\n     if (!this.dobValue) {\r\n       this.dobError = '❌Date of birth must be valid';\r\n     }\r\n    \r\n     // 18yrs x 365days * 24hrs * 60 mins * 60 seconds * 1000 milliseconds\r\n     // 365.25 for leap year considerations\r\n     if (today - minAge * 365.25 * 24 * 60 * 60 * 1000 <= dob) {\r\n       this.dobError = `❌Minimum age is ${minAge} years`;\r\n     }\r\n\r\n  }\r\n  function escapeRegex(string) {\r\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\n  function defaultPasswordStrategy(min=6,max=15){\r\n    let passwordErrorMessage =`❌Password must contain:\\n One uppercase letter\\n One lowercase letter\\n One digit\\n Between ${min} to ${max} characters long`;\r\n    \r\n    const validPasswordRegex = new RegExp(String.raw`((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{${min},${max}})`, 'i');\r\n   \r\n \r\n    if (!this.passwordValue) {\r\n      this.passwordError = '❌Password cannot be empty';\r\n    }\r\n    if (this.passwordValue && !validPasswordRegex.test(this.passwordValue)) {\r\n \r\n      this.passwordError =passwordErrorMessage\r\n        \r\n    }\r\n    if (this.passwordValue.length>max) {\r\n      this.passwordError= passwordErrorMessage;\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  defaults.email = function(id){\r\n    formInputs.push(id);\r\n    initializeInput(id);\r\n    setStrategy(id, defaultEmailStrategy);\r\n    formState.strategies[`${id}Args`] =[...arguments];\r\n    formState.strategies[id]();\r\n    \r\n  }\r\n\r\n  defaults.password = function(id,minLength=6,maxLength=15){\r\n    formInputs.push(id)\r\n    initializeInput(id);\r\n    setStrategy(id, defaultPasswordStrategy);\r\n    formState.strategies[`${id}Args`] =[...arguments].slice(1);\r\n    formState.strategies[id]();\r\n    \r\n  }\r\n  //====================VVVVVV=====================\r\n\r\n  defaults.minimumAge = function(id,age=18){\r\n    formInputs.push(id)\r\n    initializeInput(id);\r\n    setStrategy(id, defaultDateOfBirthStrategy)\r\n    formState.strategies[`${id}Args`]  =[...arguments].slice(1);\r\n    formState.strategies[id]();\r\n    \r\n  }\r\n\r\n  \r\n\r\n  function setFormState(newState) {\r\n    formState = { ...formState, ...newState };\r\n  }\r\n\r\n  // function getApi() {\r\n  //   return publicFacingApi;\r\n  // }\r\n  function captureElements() {\r\n    return formInputs.map((element) => document.getElementById(element));\r\n  }\r\n  function evaluateInput(event) {\r\n    saveInput(event);\r\n    executeStrategies();\r\n  }\r\n  function saveInput(event) {\r\n    const input = {\r\n      [event.target.id]: event.target.value.trim(),\r\n    };\r\n    setFormState({ ...input });\r\n  }\r\n\r\n  function listenToInputs(dirtyElements) {\r\n    dirtyElements.forEach((element) => {\r\n      element.addEventListener('input', evaluateInput);\r\n    });\r\n  }\r\n  function buildErrorList(id) {\r\n      let newError ={[id]:[]}\r\n      formState.errors = {...formState.errors,...newError}\r\n  \r\n  }\r\n  function initInputValues(id) {\r\n      setFormState({ [id]: '' });\r\n\r\n      Object.defineProperty(publicFacingApi, `${id}Value`, {\r\n        get() {\r\n          return formState[id];\r\n        },\r\n        configurable:true\r\n      });\r\n \r\n  }\r\n\r\n  function setStatus(status) {\r\n    formState.isValid = status;\r\n  }\r\n\r\n  function executeStrategies() {\r\n    \r\n    if (hasMissingStrategies().length) {\r\n      console.error(`Validation strategies have not been set for the following ID's: \\n${hasMissingStrategies().join('\\n')}`);\r\n      return;\r\n    }\r\n\r\n    formInputs.forEach((inputId) => {\r\n      formState.errors[inputId] = [];\r\n      executeStrategyOf(inputId);\r\n    });\r\n    displayErrorsHere(formState.feedbackElement);\r\n  }\r\n\r\n  function executeStrategyOf(inputId) {\r\n    if (!argumentsFor(inputId)) {\r\n      formState.strategies[inputId]();\r\n      return;\r\n    }\r\n    formState.strategies[inputId](...argumentsFor(inputId));\r\n  }\r\nfunction argumentsFor(id){\r\n  return formState.strategies[`${id}Args`];\r\n}\r\n  function hasMissingStrategies() {\r\n    const missingStrategies = [];\r\n    formInputs.forEach((id) => {\r\n      const strategyExist = Object.prototype.hasOwnProperty.call(formState.strategies, id);\r\n      if (!strategyExist) {\r\n        missingStrategies.push(id);\r\n      }\r\n    });\r\n    return missingStrategies;\r\n  }\r\n\r\n  function validate() {\r\n    const dirtyElements = captureElements();\r\n    listenToInputs(dirtyElements);\r\n    executeStrategies();\r\n  }\r\n\r\n  function setStrategy(id, strategyFunction) {\r\n    if (!formInputs.includes(id)) {\r\n      console.error(`Your ID '${id}' was not found in the list of ID's to validate, please set them first`);\r\n      return;\r\n    }\r\n\r\n    Object.defineProperty(publicFacingApi, `${id}Error`, {\r\n      set(message) {\r\n        formState.errors[id].push(message);\r\n      },\r\n    });\r\n\r\n    const newStrategy = { [id]: strategyFunction.bind(publicFacingApi) };\r\n    formState.strategies = { ...formState.strategies, ...newStrategy };\r\n\r\n  \r\n  }\r\n    //remove\r\n  // function getState() {\r\n  //   return formState;\r\n  // }\r\n  function displayErrorsHere(htmlID) {\r\n    formState.feedbackElement = htmlID;\r\n    const errorBlock = document.getElementById(htmlID);\r\n    errorBlock.style.wordWrap = 'break-work';\r\n    errorBlock.style.whiteSpace = 'pre-wrap';\r\n\r\n    if (!errorBlock) {\r\n      return console.error('ID to display the error messages not found');\r\n    }\r\n    const ul = document.createElement('ul');\r\n    ul.style.listStyle = 'none';\r\n\r\n    // eslint-disable-next-line arrow-body-style\r\n    formInputs.forEach((id) => {\r\n      const oneTypeOfErrors = formState.errors[id];\r\n      oneTypeOfErrors.forEach((singleError) => {\r\n        const li = document.createElement('li');\r\n        li.textContent = singleError;\r\n        ul.appendChild(li);\r\n      });\r\n    });\r\n\r\n    // clear html for each form validation\r\n    errorBlock.replaceChildren();\r\n    errorBlock.appendChild(ul);\r\n  }\r\n  const publicFacingApi = {\r\n    // getApi, remove\r\n    defaults,\r\n    getState,\r\n    validate,\r\n    setStrategy,\r\n    displayErrorsHere\r\n    \r\n  };\r\n  Object.defineProperty(publicFacingApi, 'theseIDs', {\r\n    set(listOfIDs) {\r\n      console.log({formInputsB4:formInputs});\r\n      formInputs = [...formInputs,...listOfIDs.split(',')];\r\n      \r\n      console.log({formInputsAfter:formInputs});\r\n      formInputs.forEach((inputId) =>   initializeInput(inputId) );\r\n      setStatus(false);\r\n    },\r\n  });\r\n  return publicFacingApi;\r\n\r\n  function initializeInput(id) {\r\n    buildErrorList(id);\r\n    initInputValues(id);\r\n  }\r\n})();\r\n\r\n\r\n\r\n \n\n//# sourceURL=webpack://fastformValidator/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});